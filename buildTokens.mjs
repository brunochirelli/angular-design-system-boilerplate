import StyleDictionary from "style-dictionary";

// You can use the `fileHeader` format helper function
// This function will use any custom file headers or the default
// file header
const { fileHeader } = StyleDictionary.formatHelpers;

const myCustomFormat = ({ dictionary, file }) => {
  return `${fileHeader({ file, commentStyle: "short" })}${dictionary.allTokens
    .map((token) => {
      return `--${token.name}: ${token.value};`;
    })
    .join(`\n`)}`;
};

const styleDictionary = StyleDictionary.extend({
  fileHeader: {
    // defaultMessage is the built-in file header message:
    // Do not edit directly
    // Generated on Sat, 01 Jan 2000 00:00:00 GMT
    myFileHeader: (_defaultMessage) => {
      // A file header function is expected to return an array of strings.
      // This array will be mapped to the proper comment style for a given format.
      // For example, Android XML formats use XML comments: <!-- -->,
      // whereas other languages have short and long style comments, // and /* */
      return ["Auto generated by Style Dictionary. Do not edit directly."];
    },
  },

  format: {
    myCustomFormat,
  },

  source: [`projects/ui/src/lib/styles/tokens/**/*.json`],

  platforms: {
    css: {
      transformGroup: `css`,
      buildPath: `projects/ui/src/lib/styles/`,
      files: [
        {
          destination: `_tokens.scss`,
          format: `css/variables`,
          options: {
            // You can now reference a custom file header in a file's options.
            fileHeader: `myFileHeader`,
          },
        },
      ],
    },
  },
});

// Adding a custom file header with the `.registerFileHeader`
styleDictionary.registerFileHeader({
  name: `customFileHeader`,
  fileHeader: () => {
    return [`Do not edit directly`];
  },
});

styleDictionary.buildAllPlatforms();
